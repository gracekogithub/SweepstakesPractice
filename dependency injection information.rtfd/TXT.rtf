{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Regular;\f4\froman\fcharset0 Times-Roman;\f5\fnil\fcharset0 HelveticaNeue-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red18\green18\blue18;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue252;\red13\green106\blue136;\red144\green1\blue18;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c9020\c9020\c9020;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c392\c392\c99216;\cssrgb\c0\c49020\c60392;\cssrgb\c63922\c8235\c8235;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid2\'00;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid902\'00;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl700\partightenfactor0

\f0\b\fs54 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dependency injection in .NET\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0\fs21 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 10/28/2020\cb1 \uc0\u8232 \cb3 11 minutes to read\
\pard\pardeftab720\partightenfactor0
\ls1\ilvl1{\field{\*\fldinst{HYPERLINK "https://github.com/IEvangelist"}}{\fldrslt 
\fs36 \cf4 \cb1 \ls1\ilvl1\
}}\pard\pardeftab720\partightenfactor0
\ls1\ilvl1{\field{\*\fldinst{HYPERLINK "https://github.com/gewarren"}}{\fldrslt 
\fs36 \cf4 \cb1 \ls1\ilvl1\
}}\pard\pardeftab720\partightenfactor0
\ls1\ilvl1{\field{\*\fldinst{HYPERLINK "https://github.com/c0g1t8"}}{\fldrslt 
\fs36 \cf4 \cb1 \ls1\ilvl1\
}}\pard\pardeftab720\partightenfactor0
\ls1\ilvl1{\field{\*\fldinst{HYPERLINK "https://github.com/Rick-Anderson"}}{\fldrslt 
\fs36 \cf4 \cb1 \ls1\ilvl1\
}}\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \strokec2 .NET supports the dependency injection (DI) software design pattern, which is a technique for achieving\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion"}}{\fldrslt Inversion of Control (IoC)}}\'a0between classes and their dependencies. Dependency injection in .NET is a\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/First-class_citizen"}}{\fldrslt first-class citizen}}, along with configuration, logging, and the options pattern.\
A\'a0
\f2\i dependency
\f1\i0 \'a0is an object that another object depends on. Examine the following\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0class with a\'a0
\f3\fs27\fsmilli13600 Write
\f1\fs32 \'a0method that other classes depend on:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 MessageWriter\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 void\cf2 \strokec2  \cf6 \strokec6 Write\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2  message)\
    \{\
        Console.WriteLine(\cf7 \strokec7 $"MessageWriter.Write(message: \\"\{message\}\\")"\cf2 \strokec2 );\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 A class can create an instance of the\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0class to make use of its\'a0
\f3\fs27\fsmilli13600 Write
\f1\fs32 \'a0method. In the following example, the\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0class is a dependency of the\'a0
\f3\fs27\fsmilli13600 Worker
\f1\fs32 \'a0class:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 Worker\cf2 \strokec2  : \cf6 \strokec6 BackgroundService\cf2 \strokec2 \
\{\
    \cf5 \strokec5 private\cf2 \strokec2  \cf5 \strokec5 readonly\cf2 \strokec2  MessageWriter _messageWriter = \cf5 \strokec5 new\cf2 \strokec2  MessageWriter();\
\
    \cf5 \strokec5 protected\cf2 \strokec2  \cf5 \strokec5 override\cf2 \strokec2  \cf5 \strokec5 async\cf2 \strokec2  Task \cf6 \strokec6 ExecuteAsync\cf2 \strokec2 (CancellationToken stoppingToken)\
    \{\
        \cf5 \strokec5 while\cf2 \strokec2  (!stoppingToken.IsCancellationRequested)\
        \{\
            _messageWriter.Write(\cf7 \strokec7 $"Worker running at: \{DateTimeOffset.Now\}"\cf2 \strokec2 );\
            \cf5 \strokec5 await\cf2 \strokec2  Task.Delay(1000, stoppingToken);\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The class creates and directly depends on the\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0class. Hard-coded dependencies, such as in the previous example, are problematic and should be avoided for the following reasons:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To replace\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0with a different implementation, the\'a0
\f3\fs27\fsmilli13600 Worker
\f1\fs32 \'a0class must be modified.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0has dependencies, they must also be configured by the\'a0
\f3\fs27\fsmilli13600 Worker
\f1\fs32 \'a0class. In a large project with multiple classes depending on\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 , the configuration code becomes scattered across the app.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This implementation is difficult to unit test. The app should use a mock or stub\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0class, which isn't possible with this approach.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Dependency injection addresses these problems through:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The use of an interface or base class to abstract the dependency implementation.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Registration of the dependency in a service container. .NET provides a built-in service container,\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider"}}{\fldrslt IServiceProvider}}. Services are typically registered at the app's start-up, and appended to an\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection"}}{\fldrslt IServiceCollection}}. Once all services are added, you use\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectioncontainerbuilderextensions.buildserviceprovider"}}{\fldrslt BuildServiceProvider}}\'a0to create the service container.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f2\i \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Injection
\f1\i0 \'a0of the service into the constructor of the class where it's used. The framework takes on the responsibility of creating an instance of the dependency and disposing of it when it's no longer needed.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 As an example, the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0interface defines the\'a0
\f3\fs27\fsmilli13600 Write
\f1\fs32 \'a0method:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 DependencyInjection.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 interface\cf2 \strokec2  \cf6 \strokec6 IMessageWriter\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 void\cf2 \strokec2  \cf6 \strokec6 Write\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2  message);\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 This interface is implemented by a concrete type,\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 :\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  System;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 DependencyInjection.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 MessageWriter\cf2 \strokec2  : \cf6 \strokec6 IMessageWriter\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 void\cf2 \strokec2  \cf6 \strokec6 Write\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2  message)\
        \{\
            Console.WriteLine(\cf7 \strokec7 $"MessageWriter.Write(message: \\"\{message\}\\")"\cf2 \strokec2 );\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The sample code registers the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0service with the concrete type\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 . The\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped"}}{\fldrslt AddScoped}}\'a0method registers the service with a scoped lifetime, the lifetime of a single request.\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes"}}{\fldrslt Service lifetimes}}\'a0are described later in this article.\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  System.Threading.Tasks;\
\cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.DependencyInjection;\
\cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.Hosting;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 DependencyInjection.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 Program\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 static\cf2 \strokec2  Task \cf6 \strokec6 Main\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2 [] args) =>\
            CreateHostBuilder(args).Build().RunAsync();\
\
        \cf5 \strokec5 static\cf2 \strokec2  IHostBuilder \cf6 \strokec6 CreateHostBuilder\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2 [] args) =>\
            Host.CreateDefaultBuilder(args)\
                .ConfigureServices((_, services) =>\
                    services.AddHostedService<Worker>()\
                            .AddScoped<IMessageWriter, MessageWriter>());\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 In the sample app, the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0service is requested and used to call the\'a0
\f3\fs27\fsmilli13600 Write
\f1\fs32 \'a0method:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  System;\
\cf5 \strokec5 using\cf2 \strokec2  System.Threading;\
\cf5 \strokec5 using\cf2 \strokec2  System.Threading.Tasks;\
\cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.Hosting;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 DependencyInjection.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 Worker\cf2 \strokec2  : \cf6 \strokec6 BackgroundService\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 private\cf2 \strokec2  \cf5 \strokec5 readonly\cf2 \strokec2  IMessageWriter _messageWriter;\
\
        \cf5 \strokec5 public\cf2 \strokec2  \cf6 \strokec6 Worker\cf2 \strokec2 (IMessageWriter messageWriter) =>\
            _messageWriter = messageWriter;\
\
        \cf5 \strokec5 protected\cf2 \strokec2  \cf5 \strokec5 override\cf2 \strokec2  \cf5 \strokec5 async\cf2 \strokec2  Task \cf6 \strokec6 ExecuteAsync\cf2 \strokec2 (CancellationToken stoppingToken)\
        \{\
            \cf5 \strokec5 while\cf2 \strokec2  (!stoppingToken.IsCancellationRequested)\
            \{\
                _messageWriter.Write(\cf7 \strokec7 $"Worker running at: \{DateTimeOffset.Now\}"\cf2 \strokec2 );\
                \cf5 \strokec5 await\cf2 \strokec2  Task.Delay(1000, stoppingToken);\
            \}\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 By using the DI pattern, the worker service:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Doesn't use the concrete type\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 , only the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0interface that implements it. That makes it easy to change the implementation that the controller uses without modifying the controller.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Doesn't create an instance of\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 , it's created by the DI container.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The implementation of the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0interface can be improved by using the built-in logging API:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.Logging;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 DependencyInjection.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 LoggingMessageWriter\cf2 \strokec2  : \cf6 \strokec6 IMessageWriter\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 private\cf2 \strokec2  \cf5 \strokec5 readonly\cf2 \strokec2  ILogger<LoggingMessageWriter> _logger;\
\
        \cf5 \strokec5 public\cf2 \strokec2  \cf6 \strokec6 LoggingMessageWriter\cf2 \strokec2 (ILogger<LoggingMessageWriter> logger) =>\
            _logger = logger;\
\
        \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 void\cf2 \strokec2  \cf6 \strokec6 Write\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2  message) =>\
            _logger.LogInformation(message);\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The updated\'a0
\f3\fs27\fsmilli13600 ConfigureServices
\f1\fs32 \'a0method registers the new\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0implementation:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 static\cf2 \strokec2  IHostBuilder \cf6 \strokec6 CreateHostBuilder\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2 [] args) =>\
    Host.CreateDefaultBuilder(args)\
        .ConfigureServices((_, services) =>\
            services.AddHostedService<Worker>()\
                    .AddScoped<IMessageWriter, LoggingMessageWriter>());\
\pard\pardeftab720\partightenfactor0

\fs27\fsmilli13600 \cf2 \cb3 LoggingMessageWriter
\f1\fs32 \'a0depends on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger-1"}}{\fldrslt ILogger<TCategoryName>}}, which it requests in the constructor.\'a0
\f3\fs27\fsmilli13600 ILogger<TCategoryName>
\f1\fs32 \'a0is a\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#framework-provided-services"}}{\fldrslt framework-provided service}}.\
It's not unusual to use dependency injection in a chained fashion. Each requested dependency in turn requests its own dependencies. The container resolves the dependencies in the graph and returns the fully resolved service. The collective set of dependencies that must be resolved is typically referred to as a\'a0
\f2\i dependency tree
\f1\i0 ,\'a0
\f2\i dependency graph
\f1\i0 , or\'a0
\f2\i object graph
\f1\i0 .\
The container resolves\'a0
\f3\fs27\fsmilli13600 ILogger<TCategoryName>
\f1\fs32 \'a0by taking advantage of\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#open-and-closed-types"}}{\fldrslt (generic) open types}}, eliminating the need to register every\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#constructed-types"}}{\fldrslt (generic) constructed type}}.\
In dependency injection terminology, a service:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Is typically an object that provides a service to other objects, such as the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0service.\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Is not related to a web service, although the service may use a web service.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The framework provides a robust logging system. The\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0implementations shown in the preceding examples were written to demonstrate basic DI, not to implement logging. Most apps shouldn't need to write loggers. The following code demonstrates using the default logging, which only requires the\'a0
\f3\fs27\fsmilli13600 Worker
\f1\fs32 \'a0to be registered in\'a0
\f3\fs27\fsmilli13600 ConfigureServices
\f1\fs32 \'a0as a hosted service\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionhostedserviceextensions.addhostedservice"}}{\fldrslt AddHostedService}}:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 Worker\cf2 \strokec2  : \cf6 \strokec6 BackgroundService\cf2 \strokec2 \
\{\
    \cf5 \strokec5 private\cf2 \strokec2  \cf5 \strokec5 readonly\cf2 \strokec2  ILogger<Worker> _logger;\
\
    \cf5 \strokec5 public\cf2 \strokec2  \cf6 \strokec6 Worker\cf2 \strokec2 (ILogger<Worker> logger) =>\
        _logger = logger;\
\
    \cf5 \strokec5 protected\cf2 \strokec2  \cf5 \strokec5 override\cf2 \strokec2  \cf5 \strokec5 async\cf2 \strokec2  Task \cf6 \strokec6 ExecuteAsync\cf2 \strokec2 (CancellationToken stoppingToken)\
    \{\
        \cf5 \strokec5 while\cf2 \strokec2  (!stoppingToken.IsCancellationRequested)\
        \{\
            _logger.LogInformation(\cf7 \strokec7 "Worker running at: \{time\}"\cf2 \strokec2 , DateTimeOffset.Now);\
            \cf5 \strokec5 await\cf2 \strokec2  Task.Delay(1000, stoppingToken);\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Using the preceding code, there is no need to update\'a0
\f3\fs27\fsmilli13600 ConfigureServices
\f1\fs32 , because logging is provided by the framework.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Register groups of services with extension methods\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 Microsoft Extensions uses a convention for registering a group of related services. The convention is to use a single\'a0
\f3\fs27\fsmilli13600 Add\{GROUP_NAME\}
\f1\fs32 \'a0extension method to register all of the services required by a framework feature. For example, the\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.optionsservicecollectionextensions.addoptions"}}{\fldrslt AddOptions}}\'a0extension method registers all of the services required for using options.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Framework-provided services\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 The\'a0
\f3\fs27\fsmilli13600 ConfigureServices
\f1\fs32 \'a0method registers services that the app uses, including platform features. Initially, the\'a0
\f3\fs27\fsmilli13600 IServiceCollection
\f1\fs32 \'a0provided to\'a0
\f3\fs27\fsmilli13600 ConfigureServices
\f1\fs32 \'a0has services defined by the framework depending on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/generic-host#host-configuration"}}{\fldrslt how the host was configured}}. For apps based on the .NET templates, the framework registers hundreds of services.\
The following table lists a small sample of these framework-registered services:\
\pard\pardeftab720\qr\partightenfactor0

\f0\b\fs19\fsmilli9600 \cf4 \strokec4 FRAMEWORK-PROVIDED SERVICES\cb1 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0

\fs21 \cf4 \cb3 Service Type\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Lifetime\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostapplicationlifetime"}}{\fldrslt 
\f1\b0 \cf4 \cb3 IHostApplicationLifetime}}
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger-1"}}{\fldrslt \cf4 \cb3 Microsoft.Extensions.Logging.ILogger<TCategoryName>}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.iloggerfactory"}}{\fldrslt \cf4 \cb3 Microsoft.Extensions.Logging.ILoggerFactory}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.objectpool.objectpoolprovider"}}{\fldrslt \cf4 \cb3 Microsoft.Extensions.ObjectPool.ObjectPoolProvider}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.iconfigureoptions-1"}}{\fldrslt \cf4 \cb3 Microsoft.Extensions.Options.IConfigureOptions<TOptions>}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Transient\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptions-1"}}{\fldrslt \cf4 \cb3 Microsoft.Extensions.Options.IOptions<TOptions>}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.diagnosticlistener"}}{\fldrslt \cf4 \cb3 System.Diagnostics.DiagnosticListener}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth13486\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2590\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.diagnosticsource"}}{\fldrslt \cf4 \cb3 System.Diagnostics.DiagnosticSource}}\cell 
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Singleton\cb1 \cell \lastrow\row
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \strokec2 \
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Service lifetimes\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 Services can be registered with one of the following lifetimes:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Transient\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Scoped\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Singleton\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The following sections describe each of the preceding lifetimes. Choose an appropriate lifetime for each registered service.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl540\sa360\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Transient\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 Transient lifetime services are created each time they're requested from the service container. This lifetime works best for lightweight, stateless services. Register transient services with\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addtransient"}}{\fldrslt AddTransient}}.\
In apps that process requests, transient services are disposed at the end of the request.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl540\sa360\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Scoped\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 For web applications, a scoped lifetime indicates that services are created once per client request (connection). Register scoped services with\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addscoped"}}{\fldrslt AddScoped}}.\
In apps that process requests, scoped services are disposed at the end of the request.\
When using Entity Framework Core, the\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.entityframeworkservicecollectionextensions.adddbcontext"}}{\fldrslt AddDbContext}}\'a0extension method registers\'a0
\f3\fs27\fsmilli13600 DbContext
\f1\fs32 \'a0types with a scoped lifetime by default.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb1 \'a0Note\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 Do\'a0
\f5\i\b not
\f1\i0\b0 \'a0resolve a scoped service from a singleton and be careful not to do so indirectly, for example, through a transient service. It may cause the service to have incorrect state when processing subsequent requests. It's fine to:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl560\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Resolve a singleton service from a scoped or transient service.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Resolve a scoped service from another scoped or transient service.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 By default, in the development environment, resolving a service from another service with a longer lifetime throws an exception. For more information, see\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scope-validation"}}{\fldrslt Scope validation}}.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl540\sa360\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Singleton\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 Singleton lifetime services are created either:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The first time they're requested.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 By the developer, when providing an implementation instance directly to the container. This approach is rarely needed.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Every subsequent request of the service implementation from the dependency injection container uses the same instance. If the app requires singleton behavior, allow the service container to manage the service's lifetime. Don't implement the singleton design pattern and provide code to dispose of the singleton. Services should never be disposed by code that resolved the service from the container. If a type or factory is registered as a singleton, the container disposes the singleton automatically.\
Register singleton services with\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton"}}{\fldrslt AddSingleton}}. Singleton services must be thread safe and are often used in stateless services.\
In apps that process requests, singleton services are disposed when the\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceprovider"}}{\fldrslt ServiceProvider}}\'a0is disposed on application shutdown. Because memory is not released until the app is shut down, consider memory use with a singleton service.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb1 \'a0Warning\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 Do\'a0
\f5\i\b not
\f1\i0\b0 \'a0resolve a scoped service from a singleton. It may cause the service to have incorrect state when processing subsequent requests. It's fine to resolve a singleton service from a scoped or transient service.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Service registration methods\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 The framework provides service registration extension methods that are useful in specific scenarios:\
\pard\pardeftab720\qr\partightenfactor0

\f0\b\fs19\fsmilli9600 \cf4 \strokec4 SERVICE REGISTRATION METHODS\cb1 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0

\fs21 \cf4 \cb3 Method\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Automatic\cb1 \
\cb3 object\cb1 \
\cb3 disposal\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Multiple\cb1 \
\cb3 implementations\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Pass args\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\b0\fs23\fsmilli11900 \cf4 \cb3 Add\{LIFETIME\}<\{SERVICE\}, \{IMPLEMENTATION\}>()
\f1\fs21 \cb1 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Example:\cb1 \
\
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 services.AddSingleton<IMyDep, MyDep>();
\f1\fs21 \cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 Add\{LIFETIME\}<\{SERVICE\}>(sp => new \{IMPLEMENTATION\})
\f1\fs21 \cb1 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Examples:\cb1 \
\
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 services.AddSingleton<IMyDep>(sp => new MyDep());
\f1\fs21 \cb1 \

\f3\fs23\fsmilli11900 \cb3 services.AddSingleton<IMyDep>(sp => new MyDep(99));
\f1\fs21 \cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 Add\{LIFETIME\}<\{IMPLEMENTATION\}>()
\f1\fs21 \cb1 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Example:\cb1 \
\
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 services.AddSingleton<MyDep>();
\f1\fs21 \cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 AddSingleton<\{SERVICE\}>(new \{IMPLEMENTATION\})
\f1\fs21 \cb1 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Examples:\cb1 \
\
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 services.AddSingleton<IMyDep>(new MyDep());
\f1\fs21 \cb1 \

\f3\fs23\fsmilli11900 \cb3 services.AddSingleton<IMyDep>(new MyDep(99));
\f1\fs21 \cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth9813\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx2160
\clvertalt \clshdrawnil \clwWidth1504\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth2358\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx6480
\clvertalt \clshdrawnil \clwWidth1440\clftsWidth3 \clbrdrt\brdrs\brdrw60\brdrcf4 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt180 \clpadl240 \clpadb180 \clpadr240 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 AddSingleton(new \{IMPLEMENTATION\})
\f1\fs21 \cb1 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\intbl\itap1\pardeftab720\sl300\partightenfactor0
\cf4 \cb3 Examples:\cb1 \
\
\pard\intbl\itap1\pardeftab720\sl340\partightenfactor0

\f3\fs23\fsmilli11900 \cf4 \cb3 services.AddSingleton(new MyDep());
\f1\fs21 \cb1 \

\f3\fs23\fsmilli11900 \cb3 services.AddSingleton(new MyDep(99));
\f1\fs21 \cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 No\cb1 \cell 
\pard\intbl\itap1\pardeftab720\sl300\qc\partightenfactor0
\cf4 \cb3 Yes\cb1 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 \strokec2 For more information on type disposal, see the\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-guidelines#disposal-of-services"}}{\fldrslt Disposal of services}}\'a0section.\
Registering a service with only an implementation type is equivalent to registering that service with the same implementation and service type. This is why multiple implementations of a service cannot be registered using the methods that don't take an explicit service type. These methods can register multiple\'a0
\f2\i instances
\f1\i0 \'a0of a service, but they will all have the same\'a0
\f2\i implementation
\f1\i0 \'a0type.\
Any of the above service registration methods can be used to register multiple service instances of the same service type. In the following example,\'a0
\f3\fs27\fsmilli13600 AddSingleton
\f1\fs32 \'a0is called twice with\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0as the service type. The second call to\'a0
\f3\fs27\fsmilli13600 AddSingleton
\f1\fs32 \'a0overrides the previous one when resolved as\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0and adds to the previous one when multiple services are resolved via\'a0
\f3\fs27\fsmilli13600 IEnumerable<IMessageWriter>
\f1\fs32 . Services appear in the order they were registered when resolved via\'a0
\f3\fs27\fsmilli13600 IEnumerable<\{SERVICE\}>
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  System.Threading.Tasks;\
\cf5 \strokec5 using\cf2 \strokec2  ConsoleDI.IEnumerableExample;\
\cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.DependencyInjection;\
\cf5 \strokec5 using\cf2 \strokec2  Microsoft.Extensions.Hosting;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 ConsoleDI.Example\cf2 \strokec2 \
\{\
    \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 Program\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 static\cf2 \strokec2  Task \cf6 \strokec6 Main\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2 [] args)\
        \{\
            \cf5 \strokec5 using\cf2 \strokec2  IHost host = CreateHostBuilder(args).Build();\
\
            _ = host.Services.GetService<ExampleService>();\
\
            \cf5 \strokec5 return\cf2 \strokec2  host.RunAsync();\
        \}\
\
        \cf5 \strokec5 static\cf2 \strokec2  IHostBuilder \cf6 \strokec6 CreateHostBuilder\cf2 \strokec2 (\cf5 \strokec5 string\cf2 \strokec2 [] args) =>\
            Host.CreateDefaultBuilder(args)\
                .ConfigureServices((_, services) =>\
                    services.AddSingleton<IMessageWriter, ConsoleMessageWriter>()\
                            .AddSingleton<IMessageWriter, LoggingMessageWriter>()\
                            .AddSingleton<ExampleService>());\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The preceding sample source code registers two implementations of the\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 .\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 using\cf2 \strokec2  System.Collections.Generic;\
\cf5 \strokec5 using\cf2 \strokec2  System.Diagnostics;\
\cf5 \strokec5 using\cf2 \strokec2  System.Linq;\
\
\cf5 \strokec5 namespace\cf2 \strokec2  \cf6 \strokec6 ConsoleDI.IEnumerableExample\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 ExampleService\cf2 \strokec2 \
    \{\
        \cf5 \strokec5 public\cf2 \strokec2  \cf6 \strokec6 ExampleService\cf2 \strokec2 (\
            IMessageWriter messageWriter,\
            IEnumerable<IMessageWriter> messageWriters)\
        \{\
            Trace.Assert(messageWriter \cf5 \strokec5 is\cf2 \strokec2  LoggingMessageWriter);\
\
            \cf5 \strokec5 var\cf2 \strokec2  dependencyArray = messageWriters.ToArray();\
            Trace.Assert(dependencyArray[0] \cf5 \strokec5 is\cf2 \strokec2  ConsoleMessageWriter);\
            Trace.Assert(dependencyArray[1] \cf5 \strokec5 is\cf2 \strokec2  LoggingMessageWriter);\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The\'a0
\f3\fs27\fsmilli13600 ExampleService
\f1\fs32 \'a0defines two constructor parameters; a single\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 , and an\'a0
\f3\fs27\fsmilli13600 IEnumerable<IMessageWriter>
\f1\fs32 . The single\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0is the last implementation to have been registered, whereas the\'a0
\f3\fs27\fsmilli13600 IEnumerable<IMessageWriter>
\f1\fs32 \'a0represents all registered implementations.\
The framework also provides\'a0
\f3\fs27\fsmilli13600 TryAdd\{LIFETIME\}
\f1\fs32 \'a0extension methods, which register the service only if there isn't already an implementation registered.\
In the following example, the call to\'a0
\f3\fs27\fsmilli13600 AddSingleton
\f1\fs32 \'a0registers\'a0
\f3\fs27\fsmilli13600 ConsoleMessageWriter
\f1\fs32 \'a0as an implementation for\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 . The call to\'a0
\f3\fs27\fsmilli13600 TryAddSingleton
\f1\fs32 \'a0has no effect because\'a0
\f3\fs27\fsmilli13600 IMessageWriter
\f1\fs32 \'a0already has a registered implementation:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf2 services.AddSingleton<IMessageWriter, ConsoleMessageWriter>();\
services.TryAddSingleton<IMessageWriter, LoggingMessageWriter>();\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The\'a0
\f3\fs27\fsmilli13600 TryAddSingleton
\f1\fs32 \'a0has no effect, as it was already added and the "try" will fail. The\'a0
\f3\fs27\fsmilli13600 ExampleService
\f1\fs32 \'a0would assert the following:\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 ExampleService\cf2 \strokec2 \
\{\
    \cf5 \strokec5 public\cf2 \strokec2  \cf6 \strokec6 ExampleService\cf2 \strokec2 (\
        IMessageWriter messageWriter,\
        IEnumerable<IMessageWriter> messageWriters)\
    \{\
        Trace.Assert(messageWriter \cf5 \strokec5 is\cf2 \strokec2  ConsoleMessageWriter);\
        Trace.Assert(messageWriters.Single() \cf5 \strokec5 is\cf2 \strokec2  ConsoleMessageWriter);\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 For more information, see:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryadd"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TryAdd}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryaddtransient"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TryAddTransient}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryaddscoped"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TryAddScoped}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryaddsingleton"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TryAddSingleton}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryaddenumerable"}}{\fldrslt TryAddEnumerable(ServiceDescriptor)}}\'a0methods register the service only if there isn't already an implementation\'a0
\f2\i of the same type
\f1\i0 . Multiple services are resolved via\'a0
\f3\fs27\fsmilli13600 IEnumerable<\{SERVICE\}>
\f1\fs32 . When registering services, add an instance if one of the same types hasn't already been added. Library authors use\'a0
\f3\fs27\fsmilli13600 TryAddEnumerable
\f1\fs32 \'a0to avoid registering multiple copies of an implementation in the container.\
In the following example, the first call to\'a0
\f3\fs27\fsmilli13600 TryAddEnumerable
\f1\fs32 \'a0registers\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0as an implementation for\'a0
\f3\fs27\fsmilli13600 IMessageWriter1
\f1\fs32 . The second call registers\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 \'a0for\'a0
\f3\fs27\fsmilli13600 IMessageWriter2
\f1\fs32 . The third call has no effect because\'a0
\f3\fs27\fsmilli13600 IMessageWriter1
\f1\fs32 \'a0already has a registered implementation of\'a0
\f3\fs27\fsmilli13600 MessageWriter
\f1\fs32 :\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 interface\cf2 \strokec2  \cf6 \strokec6 IMessageWriter1\cf2 \strokec2  \{ \}\
\cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 interface\cf2 \strokec2  \cf6 \strokec6 IMessageWriter2\cf2 \strokec2  \{ \}\
\
\cf5 \strokec5 public\cf2 \strokec2  \cf5 \strokec5 class\cf2 \strokec2  \cf6 \strokec6 MessageWriter\cf2 \strokec2  : \cf6 \strokec6 IMessageWriter1\cf2 \strokec2 , \cf6 \strokec6 IMessageWriter2\cf2 \strokec2 \
\{\
\}\
\
services.TryAddEnumerable(ServiceDescriptor.Singleton<IMessageWriter1, MessageWriter>());\
services.TryAddEnumerable(ServiceDescriptor.Singleton<IMessageWriter2, MessageWriter>());\
services.TryAddEnumerable(ServiceDescriptor.Singleton<IMessageWriter1, MessageWriter>());\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Service registration is generally order independent except when registering multiple implementations of the same type.\
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 IServiceCollection
\f1\fs32 \'a0is a collection of\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicedescriptor"}}{\fldrslt ServiceDescriptor}}\'a0objects. The following example shows how to register a service by creating and adding a\'a0
\f3\fs27\fsmilli13600 ServiceDescriptor
\f1\fs32 :\
\pard\pardeftab720\partightenfactor0

\fs19\fsmilli9600 \cf2 \cb1 C#\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs25\fsmilli12800 \cf2 \
\pard\pardeftab720\qc\partightenfactor0

\f1 \cf2 Copy\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs27 \cf2 \
\pard\pardeftab720\sl380\partightenfactor0

\f3\fs21 \cf5 \strokec5 string\cf2 \strokec2  secretKey = Configuration[\cf7 \strokec7 "SecretKey"\cf2 \strokec2 ];\
\cf5 \strokec5 var\cf2 \strokec2  descriptor = \cf5 \strokec5 new\cf2 \strokec2  ServiceDescriptor(\
    \cf5 \strokec5 typeof\cf2 \strokec2 (IMessageWriter),\
    _ => \cf5 \strokec5 new\cf2 \strokec2  DefaultMessageWriter(secretKey),\
    ServiceLifetime.Transient);\
\
services.Add(descriptor);\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The built-in\'a0
\f3\fs27\fsmilli13600 Add\{LIFETIME\}
\f1\fs32 \'a0methods use the same approach. For example, see the\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/dotnet/extensions/blob/v3.1.8/src/DependencyInjection/DI.Abstractions/src/ServiceCollectionServiceExtensions.cs#L216-L237"}}{\fldrslt AddScoped source code}}.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl540\sa360\partightenfactor0

\f0\b\fs42 \cf2 \cb3 Constructor injection behavior\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 Services can be resolved by using:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IServiceProvider}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ActivatorUtilities}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls10\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Creates objects that aren't registered in the container.\cb1 \
\ls10\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Used with some framework features.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Constructors can accept arguments that aren't provided by dependency injection, but the arguments must assign default values.\
When services are resolved by\'a0
\f3\fs27\fsmilli13600 IServiceProvider
\f1\fs32 \'a0or\'a0
\f3\fs27\fsmilli13600 ActivatorUtilities
\f1\fs32 , constructor injection requires a\'a0
\f2\i public
\f1\i0 \'a0constructor.\
When services are resolved by\'a0
\f3\fs27\fsmilli13600 ActivatorUtilities
\f1\fs32 , constructor injection requires that only one applicable constructor exists. Constructor overloads are supported, but only one overload can exist whose arguments can all be fulfilled by dependency injection.\
\pard\pardeftab720\sl320\qc\partightenfactor0

\f4\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\b\fs48 \cf2 \cb3 Scope validation\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 When the app runs in the\'a0
\f3\fs27\fsmilli13600 Development
\f1\fs32 \'a0environment and calls\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/core/extensions/generic-host#default-builder-settings"}}{\fldrslt CreateDefaultBuilder}}\'a0to build the host, the default service provider performs checks to verify that:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Scoped services aren't resolved from the root service provider.\cb1 \
\ls11\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Scoped services aren't injected into singletons.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The root service provider is created when\'a0{\field{\*\fldinst{HYPERLINK "https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectioncontainerbuilderextensions.buildserviceprovider"}}{\fldrslt BuildServiceProvider}}\'a0is called. The root service provider's lifetime corresponds to the app's lifetime when the provider starts with the app and is disposed when the app shuts down.\
Scoped services are disposed by the container that created them. If a scoped service is created in the root container, the service's lifetime is effectively promoted to singleton because it's only disposed by the root container when the app shuts down. Validating service scopes catches these situations when\'a0
\f3\fs27\fsmilli13600 BuildServiceProvider
\f1\fs32 \'a0is called.\
}